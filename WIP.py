{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The max profit is: \t $1,738,703.00\n",
      "Found in order #: \t 261322534\n",
      "At index value: \t 283913\n",
      "\n",
      "The max profit is: \t $ 2.36\n",
      "Found in order #: \t 822855222\n",
      "At index value: \t 367995\n",
      "\n",
      "Top 10 highest total profit items\n",
      "\n",
      "\t Order ID \t Order Date \t Total Profit\n",
      "\t 261322534 \t 6/20/2016 \t $1,738,703.00\n",
      "\t 174407804 \t 2/18/2016 \t $1,738,702.00\n",
      "\t 707318103 \t 3/16/2016 \t $1,738,701.00\n",
      "\t 340228402 \t 4/11/2016 \t $1,738,700.00\n",
      "\t 181233918 \t 3/13/2011 \t $1,738,528.13\n",
      "\t 504866254 \t 12/16/2010 \t $1,738,527.13\n",
      "\t 345871770 \t 6/13/2013 \t $1,738,354.26\n",
      "\t 878782069 \t 7/9/2013 \t $1,738,353.26\n",
      "\t 344689023 \t 7/23/2015 \t $1,738,180.39\n",
      "\t 553966987 \t 11/14/2015 \t $1,738,179.39\n",
      "\n",
      "Top 10 lowest total profit items\n",
      "\n",
      "\t Order ID \t Order Date \t Total Profit\n",
      "\t 822855222 \t 7/18/2013 \t $2.36\n",
      "\t 700491988 \t 7/27/2013 \t $2.37\n",
      "\t 657034623 \t 5/27/2013 \t $2.38\n",
      "\t 211039054 \t 8/31/2013 \t $2.39\n",
      "\t 289944922 \t 6/22/2013 \t $2.40\n",
      "\t 737123239 \t 2/7/2011 \t $4.77\n",
      "\t 413490903 \t 5/5/2011 \t $4.78\n",
      "\t 535854136 \t 4/26/2011 \t $4.79\n",
      "\t 658217370 \t 4/18/2011 \t $4.80\n",
      "\t 614760005 \t 2/15/2011 \t $4.81\n",
      "\n",
      "\n",
      "Order Search Function!\n",
      "******************************************************************************\n",
      "Please enter an Order ID Number to locate it: 546093308\n",
      "{443368995: '$14,862.69', 667593514: '$503,890.08', 940995585: '$151,880.40', 880811536: '$61,415.36', 174590194: '$188,518.85', 830192887: '$12,866.07', 425793445: '$28,327.65', 659878194: '$70,036.20', 601245963: '$583,484.16', 739008080: '$3,396,169.60'}\n",
      "{667593514: '10/19/2013'}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#import necessary modules to complete this deliverable\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Read the csv of 500,000 records\n",
    "\n",
    "df = pd.read_csv('Records.csv')\n",
    "# a. i\n",
    "\n",
    "max_profit_col = df['Total Profit'].idxmax()\n",
    "print('The max profit is: \\t ${:,.2f}'.format(df['Total Profit'].loc[max_profit_col]))\n",
    "print('Found in order #: \\t', df['Order ID'].loc[max_profit_col])\n",
    "print('At index value: \\t', max_profit_col)\n",
    "print()\n",
    "\n",
    "# a. ii\n",
    "\n",
    "min_profit_col = df['Total Profit'].idxmin()\n",
    "print('The max profit is: \\t $', df['Total Profit'].loc[min_profit_col])\n",
    "print('Found in order #: \\t', df['Order ID'].loc[min_profit_col])\n",
    "print('At index value: \\t', min_profit_col)\n",
    "print()\n",
    "\n",
    "\n",
    "# a. iii\n",
    "\n",
    "df_sorted = df.sort_values(by=['Total Profit'], ascending=False)\n",
    "df_sorted = df_sorted.set_index([\"Region\"]) \n",
    "df_sorted = df_sorted.reset_index()\n",
    "print('Top 10 highest total profit items')\n",
    "print()\n",
    "print('\\t Order ID', '\\t', 'Order Date', '\\t', 'Total Profit')\n",
    "\n",
    "\n",
    "for i in range(10):\n",
    "    print('\\t', df_sorted['Order ID'].loc[i], '\\t', df_sorted['Order Date'].loc[i], '\\t', '${:,.2f}'.format(df_sorted['Total Profit'].loc[i]))\n",
    "    i = 1 + i\n",
    "\n",
    "df_sorted = df.sort_values(by=['Total Profit'], ascending=True)\n",
    "df_sorted = df_sorted.set_index([\"Region\"]) \n",
    "df_sorted = df_sorted.reset_index()\n",
    "print()\n",
    "print('Top 10 lowest total profit items')\n",
    "print()\n",
    "print('\\t Order ID', '\\t', 'Order Date', '\\t', 'Total Profit')\n",
    "\n",
    "for i in range(10):\n",
    "    print('\\t', df_sorted['Order ID'].loc[i], '\\t', df_sorted['Order Date'].loc[i], '\\t', '${:,.2f}'.format(df_sorted['Total Profit'].loc[i]))\n",
    "    i = 1 + i\n",
    "\n",
    "print()\n",
    "print()\n",
    "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    \n",
    "# b. i\n",
    "\n",
    "print(\"Order Search Function!\")\n",
    "print(\"******************************************************************************\")\n",
    "\n",
    "#To display the requested information in part b, we will turn our dataframe into 2 dictionaries\n",
    "\n",
    "#I (Zack) spent several hours trying to get the below methods to work but was unsuccessful\n",
    "#I just ended up crashing my browser and trying to change a bunch of memory settings but ultimately accomplished nothing\n",
    "#shipDate = df.set_index('Order ID').to_dict() \n",
    "#otalRevenue = df.set_index('Order ID').to_dict()\n",
    "\n",
    "\n",
    "#We will sort the orders which generated the most reveneue in the database\n",
    "df_sorted = df_sorted.reset_index()\n",
    "df_sorted = df_sorted.set_index(['Total Revenue']) \n",
    "df_sorted = df.sort_values(by=['Total Revenue'], ascending=False)\n",
    "\n",
    "#We will create an empty dictionary to store the 10 orders with the highest revenues and their associated ship dates\n",
    "revenueDateDictionary = {}\n",
    "\n",
    "topTenRevenue = df_sorted\n",
    "\n",
    "for hi in range(10):\n",
    "    hi = 1\n",
    "    revenueDateDictionary.update({topTenRevenue['Order ID'].loc[hi]:topTenRevenue['Ship Date'].loc[hi]})\n",
    "    hi = hi + 1\n",
    "    \n",
    "#We will re-sort our dataframe to find the top 10 Total Revenues Associated with the Order ID    \n",
    "#We will create an empty dictionary to store the top 10 orders with the highest revenues\n",
    "topRevenueDictionary = {}\n",
    "for bye in range(10):\n",
    "    topRevenueDictionary.update({topTenRevenue['Order ID'].loc[bye]:'${:,.2f}'.format(topTenRevenue['Total Revenue'].loc[bye])})\n",
    "    bye = bye + 1\n",
    "    \n",
    "#We will ask the user to input an Order ID Number to see if it exists within the 10 records with the highest total profits\n",
    "orderID = input(\"Please enter an Order ID Number to locate it: \")\n",
    "\n",
    "#Using the try-else structure, we will display the inputted Order ID Number if it exists in one of the dictionaries\n",
    "try:\n",
    "    print(topRevenueDictionary)\n",
    "    print(revenueDateDictionary)\n",
    "    if orderID in (revenueDateDictionary or topRevenueDictionary):\n",
    "        print(\"Order ID:\\t\",orderID,\"\\n\")\n",
    "        #If the Order ID Number exists within one or both of these dictionaries, we will display the Ship Date (only once)\n",
    "        #Additionally, we will display the Total Revenue generated by the order\n",
    "        if orderID in revenueDateDictionary:\n",
    "            print(\"Ship Date:\\t\",revenueDateDictionary)\n",
    "            print(\"Total Revenue:\\t\",topRevenueDictionary)\n",
    "        else:\n",
    "            print(\"Ship Date:\\t\",revenueDateDictionary[orderID])\n",
    "            print(\"Total Revenue:\\t\",topRevenueDictionary[oorderID])\n",
    "    \n",
    "\n",
    "# b. ii\n",
    "#If the Order ID Number the user inputted is not found in one or both of the dictionaries we created, we will inform the user of this\n",
    "except:\n",
    "    if orderID not in (revenueDateDictionary or topRevenueDictionary):\n",
    "        print(\"\\n The inputted Order ID Number does not exist within the records (of the top 10 orders with the highest revenues)\")\n",
    "\n",
    "#The exception will pick up any errors, so the else is included for posterity\n",
    "else:\n",
    "    print(\"\")\n",
    "\n",
    "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n",
    "# c. i\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
